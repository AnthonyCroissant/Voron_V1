[gcode_macro START_PRINT]
description: Procedure to start print
gcode:
    {% set bed_temp = params.BED|default(60)|int %}
    {% set extruder_temp = params.HOTEND|default(200)|int %}
    {% set chamber_temp = params.CHAMBER %}

    {% set chamber = printer['temperature_sensor chamber_temp'] %}
    
    # Home and start warmup
    M117 Homing...
    G28
    G90
    M117 ~bed~ warm to {bed_temp}~degrees~
    M190 S{bed_temp}

    # Heatsoak if needed
    {% if bed_temp|int > 70 and chamber.temperature < chamber_temp|int %}         # Heat soak if needed
      M117 Soaking to {chamber_temp}~degrees~
      G1 X150 Y150 F12000                                                         # Move to center of bed
      G1 Z50                                                                      # Lower bed
      M106 S255                                                                   # Set Part Cooling Fan on at 100
      M109 S100                                                                   # Set hotend to 100 and wait for temp
      TEMPERATURE_WAIT SENSOR="temperature_sensor chamber_temp" MINIMUM={chamber_temp} # Wait for chamber temp
      M106 S0                                                                     # Set Part Cooling Fan off
      M117 We are hot!
    {% endif %}

    # Level bed and create mesh
    M117 ~bed~ leveling
    Z_TILT_ADJUST
    G28 Z0
    M117 ~bed~ mesh
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE
    G28
    G1 X200 Y{printer.toolhead.axis_maximum.y} F3000

    # Start Nevermore at 50%
    SET_FAN_SPEED FAN=nevermore SPEED=0.5

    # Heat up extruder and zero z offset
    M117 ~extruder~ warm to {extruder_temp}~degrees~
    M109 S{extruder_temp}                                                         # Set final extruder temperature
    CLEAN_NOZZLE
    G28 Z0                                                                        # Home Z to zero offset

    # Purge line
    M117 Purge line
    G1 X2 Y0 F6000
    G1 Z0.28
    G92 E0.0
    G90                                                                           # use absolute coordinates
    M83                                                                           # extruder relative mode
    G1 X2 Y190 E15.0 F1500.0                                                      # intro line
    G1 X2.3 F5000                                                                 # move to 2nd line
    G1 X2.3 Y10 E15.0 F1200.0                                                     # intro line
    G1 Z2                                                                         # move up just a bit
    G21                                                                           # set units to millimeters
    M82                                                                           # use absolute distances for extrusion
    G92 E0                                                                        # zero extruder
    M117

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding box (in case the machine min/maxes are not perfect)
	{% set bound = params.BOUND|default(20)|int %}
	
	# Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Absolute positioning
	G90
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}

	{% for i in range(iterations) %}
		# Diagonals
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		
		# Box
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home XY and get position again for comparison:
		G28 X Y
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED

# Overload M204 macro for dynamic acceleration control with SuperSlicer
# F controls ration between acceleration and deceleration. Defaults to 0.75
#[gcode_macro M204]
#rename_existing:            M204.1
#gcode:
#    {% if 'S' in params %}
#        SET_VELOCITY_LIMIT ACCEL={ S } ACCEL_TO_DECEL={ S|float * F|default(0.75)|float }
#    {% endif %}